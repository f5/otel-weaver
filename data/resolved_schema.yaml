file_format: 1.2.0
parent_schema_url: data/open-telemetry-schema.1.22.0.yaml
schema_url: https://mycompany.com/schemas/1.0.0
semantic_conventions:
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/url.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/http-common.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/client.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/general.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/exception.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/server.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/network.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/metrics/http.yaml
- url: https://raw.githubusercontent.com/open-telemetry/semantic-conventions/main/model/metrics/jvm-metrics.yaml
schema:
  resource:
    attributes:
    - ref: service.name
      requirement_level: recommended
      note: ''
      value: my-service
    - ref: service.version
      requirement_level: recommended
      note: ''
      value: '{{SERVICE_VERSION}}'
  instrumentation_library:
    name: my-service
    version: 1.0.0
  resource_metrics:
    attributes:
    - id: environment
      type: string
      brief: The environment in which the service is running
      examples: null
      tag: sensitive-information
      requirement_level: required
      note: ''
    metrics:
    - name: jvm.thread.count
      brief: Number of executing platform threads.
      note: ''
      attributes:
      - id: thread.daemon
        type: boolean
        brief: Whether the thread is daemon or not.
        examples: null
        requirement_level: recommended
        note: ''
      instrument: updowncounter
      unit: '{thread}'
    - name: jvm.class.loaded
      brief: Number of classes loaded since JVM start.
      note: ''
      attributes: []
      instrument: counter
      unit: '{class}'
    - name: jvm.cpu.recent_utilization
      brief: Recent CPU utilization for the process as reported by the JVM.
      note: |
        The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).
      attributes: []
      instrument: gauge
      unit: '1'
    - name: http.server.request.duration
      brief: Measures the duration of inbound HTTP requests.
      note: ''
      attributes:
      - id: server.address
        type: string
        brief: Server address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
        examples:
        - example.com
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent
          the server address behind any intermediaries (e.g. proxies) if it's available.
      - id: server.port
        type: int
        brief: Server port number
        examples:
        - 80
        - 8080
        - 443
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries (e.g. proxies) if it's available.
      - id: http.response.status_code
        type: int
        brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
        examples:
        - 200
        requirement_level:
          conditionally_required: If and only if one was received/sent.
        note: ''
      - id: network.protocol.name
        type: string
        brief: '[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.'
        examples:
        - amqp
        - http
        - mqtt
        requirement_level: recommended
        note: The value SHOULD be normalized to lowercase.
      - id: network.protocol.version
        type: string
        brief: Version of the protocol specified in `network.protocol.name`.
        examples: 3.1.1
        requirement_level: recommended
        note: |
          `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
      - id: url.scheme
        type: string
        brief: The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
        examples:
        - https
        - ftp
        - telnet
        requirement_level: recommended
        note: ''
      instrument: histogram
      unit: s
    metric_groups:
    - id: http
      attributes:
      - id: server.address
        type: string
        brief: Server address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
        examples:
        - example.com
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent
          the server address behind any intermediaries (e.g. proxies) if it's available.
      - id: server.port
        type: int
        brief: Server port number
        examples:
        - 80
        - 8080
        - 443
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries (e.g. proxies) if it's available.
      - id: http.response.status_code
        type: int
        brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
        examples:
        - 200
        requirement_level:
          conditionally_required: If and only if one was received/sent.
        note: ''
      - id: network.protocol.name
        type: string
        brief: '[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.'
        examples:
        - amqp
        - http
        - mqtt
        requirement_level: recommended
        note: The value SHOULD be normalized to lowercase.
      - id: network.protocol.version
        type: string
        brief: Version of the protocol specified in `network.protocol.name`.
        examples: 3.1.1
        requirement_level: recommended
        note: |
          `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
      - id: url.scheme
        type: string
        brief: The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
        examples:
        - https
        - ftp
        - telnet
        requirement_level: recommended
        note: ''
      - id: url.host
        type: string
        brief: The host of the request
        examples: null
        requirement_level: required
        note: ''
      metrics:
      - name: jvm.thread.count
        brief: Number of executing platform threads.
        note: ''
        attributes:
        - id: server.address
          type: string
          brief: Server address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
          examples:
          - example.com
          requirement_level: recommended
          note: |
            When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent
            the server address behind any intermediaries (e.g. proxies) if it's available.
        - id: server.port
          type: int
          brief: Server port number
          examples:
          - 80
          - 8080
          - 443
          requirement_level: recommended
          note: |
            When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries (e.g. proxies) if it's available.
        - id: http.response.status_code
          type: int
          brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
          examples:
          - 200
          requirement_level:
            conditionally_required: If and only if one was received/sent.
          note: ''
        - id: network.protocol.name
          type: string
          brief: '[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.'
          examples:
          - amqp
          - http
          - mqtt
          requirement_level: recommended
          note: The value SHOULD be normalized to lowercase.
        - id: network.protocol.version
          type: string
          brief: Version of the protocol specified in `network.protocol.name`.
          examples: 3.1.1
          requirement_level: recommended
          note: |
            `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
        - id: url.scheme
          type: string
          brief: The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
          examples:
          - https
          - ftp
          - telnet
          requirement_level: recommended
          note: ''
        - id: url.host
          type: string
          brief: The host of the request
          examples: null
          requirement_level: required
          note: ''
        instrument: updowncounter
        unit: '{thread}'
      - name: jvm.class.loaded
        brief: Number of classes loaded since JVM start.
        note: ''
        attributes:
        - id: server.address
          type: string
          brief: Server address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
          examples:
          - example.com
          requirement_level: recommended
          note: |
            When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent
            the server address behind any intermediaries (e.g. proxies) if it's available.
        - id: server.port
          type: int
          brief: Server port number
          examples:
          - 80
          - 8080
          - 443
          requirement_level: recommended
          note: |
            When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries (e.g. proxies) if it's available.
        - id: http.response.status_code
          type: int
          brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
          examples:
          - 200
          requirement_level:
            conditionally_required: If and only if one was received/sent.
          note: ''
        - id: network.protocol.name
          type: string
          brief: '[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.'
          examples:
          - amqp
          - http
          - mqtt
          requirement_level: recommended
          note: The value SHOULD be normalized to lowercase.
        - id: network.protocol.version
          type: string
          brief: Version of the protocol specified in `network.protocol.name`.
          examples: 3.1.1
          requirement_level: recommended
          note: |
            `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
        - id: url.scheme
          type: string
          brief: The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
          examples:
          - https
          - ftp
          - telnet
          requirement_level: recommended
          note: ''
        - id: url.host
          type: string
          brief: The host of the request
          examples: null
          requirement_level: required
          note: ''
        instrument: counter
        unit: '{class}'
      - name: jvm.cpu.recent_utilization
        brief: Recent CPU utilization for the process as reported by the JVM.
        note: |
          The value range is [0.0,1.0]. This utilization is not defined as being for the specific interval since last measurement (unlike `system.cpu.utilization`). [Reference](https://docs.oracle.com/en/java/javase/17/docs/api/jdk.management/com/sun/management/OperatingSystemMXBean.html#getProcessCpuLoad()).
        attributes:
        - id: server.address
          type: string
          brief: Server address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
          examples:
          - example.com
          requirement_level: recommended
          note: |
            When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent
            the server address behind any intermediaries (e.g. proxies) if it's available.
        - id: server.port
          type: int
          brief: Server port number
          examples:
          - 80
          - 8080
          - 443
          requirement_level: recommended
          note: |
            When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries (e.g. proxies) if it's available.
        - id: http.response.status_code
          type: int
          brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
          examples:
          - 200
          requirement_level:
            conditionally_required: If and only if one was received/sent.
          note: ''
        - id: network.protocol.name
          type: string
          brief: '[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.'
          examples:
          - amqp
          - http
          - mqtt
          requirement_level: recommended
          note: The value SHOULD be normalized to lowercase.
        - id: network.protocol.version
          type: string
          brief: Version of the protocol specified in `network.protocol.name`.
          examples: 3.1.1
          requirement_level: recommended
          note: |
            `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
        - id: url.scheme
          type: string
          brief: The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
          examples:
          - https
          - ftp
          - telnet
          requirement_level: recommended
          note: ''
        - id: url.host
          type: string
          brief: The host of the request
          examples: null
          requirement_level: required
          note: ''
        instrument: gauge
        unit: '1'
  resource_events:
    events:
    - event_name: http
      domain: http
      attributes:
      - id: server.address
        type: string
        brief: Server address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
        examples:
        - example.com
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent
          the server address behind any intermediaries (e.g. proxies) if it's available.
      - id: server.port
        type: int
        brief: Server port number
        examples:
        - 80
        - 8080
        - 443
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries (e.g. proxies) if it's available.
      - id: http.response.status_code
        type: int
        brief: '[HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).'
        examples:
        - 200
        requirement_level:
          conditionally_required: If and only if one was received/sent.
        note: ''
      - id: network.protocol.name
        type: string
        brief: '[OSI application layer](https://osi-model.com/application-layer/) or non-OSI equivalent.'
        examples:
        - amqp
        - http
        - mqtt
        requirement_level: recommended
        note: The value SHOULD be normalized to lowercase.
      - id: network.protocol.version
        type: string
        brief: Version of the protocol specified in `network.protocol.name`.
        examples: 3.1.1
        requirement_level: recommended
        note: |
          `network.protocol.version` refers to the version of the protocol used and might be different from the protocol client's version. If the HTTP client used has a version of `0.27.2`, but sends HTTP version `1.1`, this attribute should be set to `1.1`.
      - id: url.scheme
        type: string
        brief: The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
        examples:
        - https
        - ftp
        - telnet
        requirement_level: recommended
        note: ''
      - id: url.host
        type: string
        brief: The host of the request
        examples: null
        requirement_level: required
        note: ''
  resource_spans:
    spans:
    - span_name: http.request
      attributes:
      - id: server.address
        type: string
        brief: Server address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
        examples:
        - example.com
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.address` SHOULD represent
          the server address behind any intermediaries (e.g. proxies) if it's available.
      - id: server.port
        type: int
        brief: Server port number
        examples:
        - 80
        - 8080
        - 443
        requirement_level: recommended
        note: |
          When observed from the client side, and when communicating through an intermediary, `server.port` SHOULD represent the server port behind any intermediaries (e.g. proxies) if it's available.
      - id: server.socket.address
        type: string
        brief: Server address of the socket connection - IP address or Unix domain socket name.
        examples:
        - 10.5.3.2
        requirement_level:
          recommended: If different than `server.address`.
        note: |
          When observed from the client side, this SHOULD represent the immediate server peer address.
          When observed from the server side, this SHOULD represent the physical server address.
      - id: server.socket.port
        type: int
        brief: Server port number of the socket connection.
        examples:
        - 16456
        requirement_level:
          recommended: If different than `server.port`.
        note: |
          When observed from the client side, this SHOULD represent the immediate server peer port.
          When observed from the server side, this SHOULD represent the physical server port.
      - id: client.address
        type: string
        brief: Client address - domain name if available without reverse DNS lookup, otherwise IP address or Unix domain socket name.
        examples:
        - /tmp/my.sock
        - 10.1.2.80
        requirement_level: recommended
        note: |
          When observed from the server side, and when communicating through an intermediary, `client.address` SHOULD represent the client address behind any intermediaries (e.g. proxies) if it's available.
      - id: client.port
        type: int
        brief: Client port number.
        examples:
        - 65123
        requirement_level: recommended
        note: |
          When observed from the server side, and when communicating through an intermediary, `client.port` SHOULD represent the client port behind any intermediaries (e.g. proxies) if it's available.
      - id: client.socket.address
        type: string
        brief: Client address of the socket connection - IP address or Unix domain socket name.
        examples:
        - /tmp/my.sock
        - 127.0.0.1
        requirement_level:
          recommended: If different than `client.address`.
        note: |
          When observed from the server side, this SHOULD represent the immediate client peer address.
          When observed from the client side, this SHOULD represent the physical client address.
      - id: client.socket.port
        type: int
        brief: Client port number of the socket connection.
        examples:
        - 35555
        requirement_level:
          recommended: If different than `client.port`.
        note: |
          When observed from the server side, this SHOULD represent the immediate client peer port.
          When observed from the client side, this SHOULD represent the physical client port.
      - id: url.scheme
        type: string
        brief: The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.
        examples:
        - https
        - ftp
        - telnet
        requirement_level: recommended
        note: ''
      - id: url.host
        type: string
        brief: The host of the request
        examples: null
        requirement_level: required
        note: ''
      events:
      - event_name: error
        attributes:
        - id: exception.type
          type: string
          brief: |
            The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.
          examples:
          - java.net.ConnectException
          - OSError
          requirement_level: recommended
          note: ''
        - id: exception.message
          type: string
          brief: The exception message.
          examples:
          - Division by zero
          - Can't convert 'int' object to str implicitly
          requirement_level: recommended
          note: ''
        - id: exception.stacktrace
          type: string
          brief: |
            A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.
          examples: 'Exception in thread "main" java.lang.RuntimeException: Test exception\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\n at com.example.GenerateTrace.main(GenerateTrace.java:5)'
          requirement_level: recommended
          note: ''
