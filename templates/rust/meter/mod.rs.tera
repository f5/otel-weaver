// SPDX-License-Identifier: Apache-2.0

//! Generated OTel Client Loggers API.

{% if schema.resource_metrics is defined %}
{% if schema.resource_metrics.univariate_metrics is defined %}
{% for metric in schema.resource_metrics.univariate_metrics %}
/// Metric `{{ metric.name }}` to report u64 values.
pub fn {{ metric.name | function_name }}_u64() -> {{ metric.name | struct_name }}U64{{ metric.instrument | instrument | struct_name }} {
    {{ metric.name | struct_name }}U64{{ metric.instrument | instrument | struct_name }}{}
}

/// Metric `{{ metric.name }}` to report f64 values.
pub fn {{ metric.name | function_name }}_f64() -> {{ metric.name | struct_name }}F64{{ metric.instrument | instrument | struct_name }} {
    {{ metric.name | struct_name }}F64{{ metric.instrument | instrument | struct_name }}{}
}

pub struct {{ metric.name | struct_name }}U64{{ metric.instrument | instrument | struct_name }} {
}

pub struct {{ metric.name | struct_name }}F64{{ metric.instrument | instrument | struct_name }} {
}

impl {{ metric.name | struct_name }}U64{{ metric.instrument | instrument | struct_name }} {
    {% if metric.instrument == "counter" %}
    pub fn add(&mut self, value: u64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% elif metric.instrument == "updowncounter" %}
    pub fn add(&mut self, value: u64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% elif metric.instrument == "gauge" %}
    pub fn add(&mut self, value: u64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% elif metric.instrument == "histogram" %}
    pub fn record(&mut self, value: u64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% endif %}
}

impl {{ metric.name | struct_name }}F64{{ metric.instrument | instrument | struct_name }} {
    {% if metric.instrument == "counter" %}
    pub fn add(&mut self, value: f64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% elif metric.instrument == "updowncounter" %}
    pub fn add(&mut self, value: f64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% elif metric.instrument == "gauge" %}
    pub fn add(&mut self, value: f64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% elif metric.instrument == "histogram" %}
    pub fn record(&mut self, value: f64, attrs: {{ metric.name | struct_name }}Attrs) {}
    {% endif %}
}

/// Metric attributes for `{{ metric.name }}`.
pub struct {{ metric.name | struct_name }}Attrs {
    {%- for attr in metric.attributes %}
    /// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    /// ") }}
    pub {{attr.id | arg_name}}: {% if attr is required %}{{ attr.type | type_mapping }}{% else %}Option<{{ attr.type | type_mapping }}>{% endif %},
    {%- endfor %}
}

{% endfor  %}
{% endif %}
{% endif %}


{% if schema.resource_metrics is defined %}
{% if schema.resource_metrics.multivariate_metrics is defined %}
{% for metric in schema.resource_metrics.multivariate_metrics %}
/// Multivariate metric `{{ metric.id }}`.
pub fn {{ metric.id | function_name }}() -> {{ metric.id | struct_name }} {
    {{ metric.id | struct_name }}{}
}

pub struct {{ metric.id | struct_name }} {
}

impl {{ metric.id | struct_name }} {
    pub fn report(&mut self, metrics: {{ metric.id | struct_name }}Metrics, attrs: {{ metric.id | struct_name }}Attrs) {}
}

/// Multivariate metrics for `{{ metric.id }}`.
pub struct {{ metric.id | struct_name }}Metrics {
    {%- for metric in metric.metrics %}
    /// {{ [metric.brief, metric.note] | comment(prefix="    /// ") }}
    pub {{metric.name | arg_name}}: u64,
    {%- endfor %}
}

/// Metric attributes for `{{ metric.id }}`.
pub struct {{ metric.id | struct_name }}Attrs {
    {%- for attr in metric.attributes %}
    /// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    /// ") }}
    pub {{attr.id | arg_name}}: {% if attr is required %}{{ attr.type | type_mapping }}{% else %}Option<{{ attr.type | type_mapping }}>{% endif %},
    {%- endfor %}
}

{% endfor  %}
{% endif %}
{% endif %}