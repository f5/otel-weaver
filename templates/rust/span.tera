{# Define the file name for the generated code #}
{%- set file_name = id | file_name -%}
{{- config(file_name="tracers/" ~ file_name ~ ".rs") -}}
{%- set required_attrs = attributes | required -%}
{%- set not_required_attrs = attributes | not_required -%}
// SPDX-License-Identifier: Apache-2.0

//! Code generated by OTel Weaver to define the span `{{ id }}`.

pub enum Status {
    Unset,
    Error,
    Ok,
}

{%- if required_attrs | length > 0 %}
/// Starts a new named `{{ id }}` span with the given required attributes.
pub fn start(
    name: &str,
    required_attrs: {{id | struct_name}}Attrs,
) -> {{id | struct_name}}Span {
    {{id | struct_name}}Span {
        {{id | field_name}}_attrs: required_attrs,
        {{id | field_name}}_opt_attrs: Default::default(),
        events: Vec::new(),
    }
}

/// Starts a new named `{{ id }}` span with the given required attributes
/// and the optional attributes.
pub fn start_with_opt_attrs(
    name: &str,
    required_attrs: {{id | struct_name}}Attrs,
    optional_attrs: {{id | struct_name}}OptAttrs,
    ) -> {{id | struct_name}}Span {
    {{id | struct_name}}Span {
        {{id | field_name}}_attrs: required_attrs,
        {{id | field_name}}_opt_attrs: optional_attrs,
        events: Vec::new(),
    }
}
{%- else %}
/// Starts a new named `{{ id }}` span.
pub fn start(name: &str) -> {{id | struct_name}}Span {
    {{id | struct_name}}Span {
        {{id | field_name}}_opt_attrs: {{id | struct_name}}OptAttrs::default(),
    }
}

/// Starts a new named `{{ id }}` span with the given optional attributes.
pub fn start_with_opt_attrs(
    name: &str,
    optional_attrs: {{id | struct_name}}OptAttrs,
    ) -> {{id | struct_name}}Span {
    {{id | struct_name}}Span {
        {{id | field_name}}_opt_attrs: optional_attrs,
    }
}
{%- endif %}

pub struct {{id | struct_name}}Span {
{%- if required_attrs | length > 0 %}
    /// Required span attributes for `{{ id }}`.
    {{id | field_name}}_attrs: {{id | struct_name}}Attrs,
{%- endif -%}
{%- if not_required_attrs | length > 0 %}
    /// Optional span attributes for `{{ id }}`.
    {{id | field_name}}_opt_attrs: {{id | struct_name}}OptAttrs,
{%- endif %}
{%- if events | length > 0 -%}
    /// Events for `{{ id }}`.
    events: Vec<Event>,
{%- endif %}
}

{% if required_attrs | length > 0 -%}
/// Required span attributes for `{{ id }}`.
pub struct {{id | struct_name}}Attrs {
{%- for attr in required_attrs %}
    /// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    /// ") }}
    pub {{attr.id | arg_name}}: {{ attr.type | type_mapping }},
{%- endfor %}
}
{%- endif %}

{% if not_required_attrs | length > 0 -%}
/// Optional span attributes for `{{ id }}`.
#[derive(Default)]
pub struct {{id | struct_name}}OptAttrs {
{%- for attr in not_required_attrs %}
    /// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    /// ") }}
    pub {{attr.id | arg_name}}: Option<{{ attr.type | type_mapping }}>,
{%- endfor %}
}
{%- endif %}

{% if events | length > 0 -%}
pub enum Event {
    {% for event in events -%}
    {{ event.id | struct_name}} {
        {%- for attr in event.attributes %}
        /// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="        /// ") }}
        {%- if attr is required %}
        {{attr.id | field_name}}: {{ attr.type | type_mapping }},
        {% else %}
        {{attr.id | field_name}}: Option<{{ attr.type | type_mapping }}>,
        {% endif -%}
        {% endfor %}
    },
    {%- endfor %}
}
{%- endif %}


impl {{id | struct_name}}Span {
    {%- for attr in not_required_attrs %}
    /// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    /// ") }}
    pub fn attr_{{attr.id | function_name}}(&mut self, value: {{ attr.type | type_mapping }}) {
        self.{{id | field_name}}_opt_attrs.{{attr.id | field_name}} = Some(value);
    }
    {% endfor %}

    {% if events | length > 0 -%}
    /// Adds an event to the span.
    pub fn event(&mut self, event: Event) {
        self.events.push(event);
    }
    {%- endif %}

    pub fn status(&self, status: Status) {}
    pub fn error(&self, err: &dyn std::error::Error) {}

    /// Ends the span.
    pub fn end(self) {}

    {%- if not_required_attrs | length > 0 %}
    /// Ends the span with the optional attributes.
    pub fn end_with_opt_attrs(mut self, optional_attrs: {{id | struct_name}}OptAttrs) {
        self.{{id | field_name}}_opt_attrs = optional_attrs;
    }
    {%- endif %}
}