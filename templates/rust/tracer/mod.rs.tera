// SPDX-License-Identifier: Apache-2.0

//! Generated code for the tracer API.

use std::error::Error;

pub enum Status {
    Unset,
    Error,
    Ok,
}

pub struct Tracer {}

impl Tracer {
    {% for span in schema.resource_spans.spans -%}
    pub fn start_{{span.id | snake_case}}(
        name: &str,
        {% for attribute in span.attributes | required -%}
        {{attribute.id | snake_case}}: {{ attribute.type | type_mapping }},
        {%- endfor %}
    ) -> {{span.id | PascalCase}}Span {
        {{span.id | PascalCase}}Span::default()
    }
    {%- endfor %}
}

{% for span in schema.resource_spans.spans -%}
#[derive(Default)]
pub struct {{span.id | PascalCase}}Span {}
{% endfor %}

{% for span in schema.resource_spans.spans -%}
{% for event in span.events -%}
{%- set required_attrs = event.attributes | required -%}
{%- set not_required_attrs = event.attributes | not_required -%}
{%- if required_attrs | length > 0 -%}
/// Required attributes for `{{event.id}}` event.
pub struct {{event.id | PascalCase}}RequiredAttributes {
    {%- for attribute in required_attrs %}
{{ attribute.brief | comment(prefix="    /// ")}}
{{ attribute.note | comment(prefix="    /// ")}}
{{ attribute.examples | comment_examples(prefix="    /// ")}}
    pub {{attribute.id | snake_case}}: {{ attribute.type | type_mapping }},
    {% endfor %}
}
{%- endif -%}

{%- if not_required_attrs | length > 0 -%}
/// Optional attributes for `{{event.id}}` event.
#[derive(Default)]
pub struct {{event.id | PascalCase}}OptionalAttributes {
    {%- for attribute in not_required_attrs %}
{{ attribute.brief | comment(prefix="    /// ") }}
{{ attribute.note | comment(prefix="    /// ") }}
{{ attribute.examples | comment_examples(prefix="    /// ") }}
    pub {{attribute.id | snake_case}}: Option<{{ attribute.type | type_mapping }}>,
    {% endfor %}
}
{%- endif -%}
{%- endfor %}

impl {{span.id | PascalCase}}Span {
    /// Optional span attributes

    {%- for attr in span.attributes | not_required %}
{{ attr.brief | comment(prefix="    /// ") }}
{{ attr.note | comment(prefix="    /// ") }}
{{ attr.examples | comment_examples(prefix="    /// ") }}
    pub fn {{attr.id | snake_case}}_attr(&self, value: {{ attr.type | type_mapping }}) {}
    {% endfor %}

    {% for event in span.events -%}
    {%- set required_attrs = event.attributes | required -%}
    {%- set not_required_attrs = event.attributes | not_required -%}
    pub fn {{event.id | snake_case}}_event(&self
        {%- if required_attrs | length > 0 -%}, required_attrs: {{event.id | PascalCase}}RequiredAttributes{% endif -%}
        {%- if not_required_attrs | length > 0 -%}, optional_attrs: Option<{{event.id | PascalCase}}OptionalAttributes>{% endif -%}
    ) {}
    {%- endfor %}

    pub fn status(&self, status: Status) {}
    pub fn error(&self, err: &dyn Error) {}

    pub fn end(self) {}
}
{% endfor %}
