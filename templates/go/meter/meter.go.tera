// SPDX-License-Identifier: Apache-2.0

package meter

{% if schema.resource_metrics is defined %}
{% if schema.resource_metrics.univariate_metrics is defined %}
{% for metric in schema.resource_metrics.univariate_metrics %}
// Metric `{{ metric.name }}` to report int64 values.
func {{ metric.name | function_name }}IntMetric() *{{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }} {
    return &{{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }}{}
}

// Metric `{{ metric.name }}` to report float64 values.
func {{ metric.name | function_name }}Float64Metric() *{{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }} {
    return &{{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }}{}
}

type {{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }} struct {
}

type {{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }} struct {
}

{% if metric.instrument == "counter" %}
func (m* {{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }}) Add(value int64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }} { return m }
{% elif metric.instrument == "updowncounter" %}
func (m* {{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }}) Add(value int64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }} { return m }
{% elif metric.instrument == "gauge" %}
func (m* {{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }}) Add(value int64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }} { return m }
{% elif metric.instrument == "histogram" %}
func (m* {{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }}) Record(value int64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Int{{ metric.instrument | instrument | struct_name }} { return m }
{% endif %}

{% if metric.instrument == "counter" %}
func (m* {{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }}) Add(value float64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }} { return m }
{% elif metric.instrument == "updowncounter" %}
func (m* {{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }}) Add(value float64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }} { return m }
{% elif metric.instrument == "gauge" %}
func (m* {{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }}) Add(value float64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }} { return m }
{% elif metric.instrument == "histogram" %}
func (m* {{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }}) Record(value float64, attrs {{ metric.name | struct_name }}Attrs) *{{ metric.name | struct_name }}Float64{{ metric.instrument | instrument | struct_name }} { return m }
{% endif %}

// {{ metric.name | struct_name }}Attrs metric attributes for `{{ metric.name }}`.
type {{ metric.name | struct_name }}Attrs struct {
{%- for attr in metric.attributes %}
    // {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
    {{attr.id | arg_name}} {{ attr.type | type_mapping }}
{%- endfor %}
}

{% endfor  %}
{% endif %}
{% endif %}


{% if schema.resource_metrics is defined %}
{% if schema.resource_metrics.multivariate_metrics is defined %}
{% for metric in schema.resource_metrics.multivariate_metrics %}
{%- set required_attrs = metric.attributes | required -%}
{%- set not_required_attrs = metric.attributes | not_required -%}

// Multivariate metric `{{ metric.id }}`.
func {{ metric.id | function_name }}() *{{ metric.id | struct_name }}Meter {
    return &{{ metric.id | struct_name }}Meter{}
}

type {{ metric.id | struct_name }}Meter struct {
}

func (m *{{ metric.id | struct_name }}Meter) Report(
    metrics {{ metric.id | struct_name }}MetricGroup,
    {%- for attr in required_attrs %}
        {{attr.id | field_name}} {{attr.id | struct_name}}ReqAttr,
    {%- endfor %}
) *{{ metric.id | struct_name }}Meter {
    return m
}

func (m *{{ metric.id | struct_name }}Meter) ReportWithOptAttrs(
    metrics {{ metric.id | struct_name }}MetricGroup,
    {%- for attr in required_attrs %}
        {{attr.id | field_name}} {{attr.id | struct_name}}ReqAttr,
    {%- endfor %}
    optionalAttrs {{ metric.id | struct_name }}OptAttrs,
) *{{ metric.id | struct_name }}Meter {
    return m
}

{% if required_attrs | length > 0 -%}
{%- for attr in required_attrs %}
// {{attr.id | struct_name}}ReqAttr represents a required attribute for `{{ metric.id }}`.
// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="// ") }}
type {{attr.id | struct_name}}ReqAttr struct { {{ attr.type | type_mapping }} }
func {{attr.id | struct_name}}(v {{ attr.type | type_mapping }}) {{attr.id | struct_name}}ReqAttr { return {{attr.id | struct_name}}ReqAttr{v} }
{%- endfor %}

// {{metric.id | struct_name}}Attrs represents the required metric attributes for `{{ metric.id }}`.
type {{metric.id | struct_name}}Attrs struct {
{%- for attr in required_attrs %}
// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
{{attr.id | field_name}} {{ attr.type | type_mapping }}
{%- endfor %}
}
{%- endif %}

// {{ metric.id | struct_name }}MetricGroup multivariate metrics for `{{ metric.id }}`.
type {{ metric.id | struct_name }}MetricGroup struct {
{%- for metric in metric.metrics %}
    // {{ [metric.brief, metric.note] | comment(prefix="    // ") }}
    {{metric.name | field_name}} int64
{%- endfor %}
}

// {{ metric.id | struct_name }}OptAttrs represents all the optional attributes for `{{ metric.id }}`.
type {{ metric.id | struct_name }}OptAttrs struct {
{%- for attr in not_required_attrs %}
    // {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
    {{attr.id | field_name}} {{ attr.type | type_mapping }}
{%- endfor %}
}

{% endfor  %}
{% endif %}
{% endif %}