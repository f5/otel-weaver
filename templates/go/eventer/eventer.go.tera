// SPDX-License-Identifier: Apache-2.0

package eventer

{% if schema.resource_events is defined %}
{% for event in schema.resource_events.events %}
{%- set required_attrs = event.attributes | required -%}
{%- set not_required_attrs = event.attributes | not_required -%}

// Event{{ event.domain | function_name }}{{ event.event_name | function_name }} events `{{ event.event_name }}` record with the given
// required attributes.
func Event{{ event.domain | function_name }}{{ event.event_name | function_name }} (
    {%- for attr in required_attrs %}
    {{attr.id | field_name}} {{attr.id | struct_name}}ReqAttr,
    {%- endfor %}
) {}

// Event{{ event.domain | function_name }}{{ event.event_name | function_name }}WithOptAttrs events `{{ event.event_name }}` record with the given
// required attributes and the optional attributes.
func Event{{ event.domain | function_name }}{{ event.event_name | function_name }}WithOptAttrs (
{%- for attr in required_attrs %}
    {{attr.id | field_name}} {{attr.id | struct_name}}ReqAttr,
{%- endfor %}
    optAttrs {{ event.domain | struct_name }}{{ event.event_name | struct_name }}OptAttrs,
) {}

{% if required_attrs | length > 0 -%}
// {{event.domain | struct_name}}{{event.event_name | struct_name}}Attrs represents the required event attributes for `{{ event.event_name }}`.
type {{event.domain | struct_name}}{{event.event_name | struct_name}}Attrs struct {
    {%- for attr in required_attrs %}
    // {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
    {{attr.id | field_name}} {{ attr.type | type_mapping }}
    {%- endfor %}
}
{%- endif %}

// {{event.domain | struct_name}}{{ event.event_name | struct_name }}OptAttrs represents all the optional attributes for `{{ event.event_name }}`.
type {{event.domain | struct_name}}{{ event.event_name | struct_name }}OptAttrs struct {
    {%- for attr in not_required_attrs %}
    // {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
    {{attr.id | field_name}} {{ attr.type | type_mapping }}
    {%- endfor %}
}

{% endfor  %}
{% for attr in schema.resource_events.events | unique_attributes | required %}
// {{attr.id | struct_name}}ReqAttr represents a required attribute.
// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="// ") }}
type {{attr.id | struct_name}}ReqAttr struct { {{ attr.type | type_mapping }} }
func {{attr.id | struct_name}}(v {{ attr.type | type_mapping }}) {{attr.id | struct_name}}ReqAttr { return {{attr.id | struct_name}}ReqAttr{v} }
{% endfor %}
{% endif %}