package otel

import (
    "context"
    "fmt"
    "log"

    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
    "go.opentelemetry.io/otel/sdk/resource"
    sdktrace "go.opentelemetry.io/otel/sdk/trace"
    "go.opentelemetry.io/otel/trace"
)

type ClientHandler struct {
    ctx      context.Context
    shutdown func(context.Context) error
}

const (
    InstrumentationName    = "{{ schema.instrumentation_library.name }}"
    InstrumentationVersion = "{{ schema.instrumentation_library.version }}"
)

var (
    Tracer = otel.GetTracerProvider().Tracer(
        InstrumentationName,
        trace.WithInstrumentationVersion(InstrumentationVersion),
        trace.WithSchemaURL("{{ schema_url }}"),
    )

{%- for attr in schema.resource.attributes %}
    {{ attr.id | field_name }}Key = attribute.Key("{{attr.id}}")
{%- endfor %}
)

func Resource() *resource.Resource {
    return resource.NewWithAttributes(
        "{{ schema_url }}",
{%- for attr in schema.resource.attributes %}
        {{ attr.id | field_name }}Key.{{ attr.type | type_mapping | function_name }}("{{ attr.value }}"),
{%- endfor %}
    )
}

func InstallExportPipeline() (func(context.Context) error, error) {
    exporter, err := stdouttrace.New(stdouttrace.WithPrettyPrint())
    if err != nil {
        return nil, fmt.Errorf("creating stdout exporter: %w", err)
    }

    tracerProvider := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(exporter),
        sdktrace.WithResource(Resource()),
    )
    otel.SetTracerProvider(tracerProvider)

    return tracerProvider.Shutdown, nil
}

func Client() *ClientHandler {
    ctx := context.Background()

    // Registers a tracer Provider globally.
    shutdown, err := InstallExportPipeline()
    if err != nil {
        log.Fatal(err)
    }

    return &ClientHandler{ctx: ctx, shutdown: shutdown}
}

func (o *ClientHandler) Shutdown() {
    if err := o.shutdown(o.ctx); err != nil {
        log.Fatal(err)
    }
}