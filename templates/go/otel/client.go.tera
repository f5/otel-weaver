{% import "required_attrs.macro.tera" as required %}
{% import "optional_attrs.macro.tera" as optional %}
package otel

import (
    "context"
    "fmt"
    "log"
	"os"
    "time"

    "go.opentelemetry.io/otel"
    otel_attr "go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"
    "go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
    "go.opentelemetry.io/otel/metric"
	sdkmetric "go.opentelemetry.io/otel/sdk/metric"
    "go.opentelemetry.io/otel/sdk/resource"
    sdktrace "go.opentelemetry.io/otel/sdk/trace"
    "go.opentelemetry.io/otel/trace"

    "go_test/pkg/otel/attribute"
)

const (
    InstrumentationName    = "{{ schema.instrumentation_library.name }}"
    InstrumentationVersion = "{{ schema.instrumentation_library.version }}"
)

var (
	Meter = otel.GetMeterProvider().Meter(
		InstrumentationName,
		metric.WithInstrumentationVersion(InstrumentationVersion),
		metric.WithSchemaURL("{{ schema_url }}"),
	)
    Tracer = otel.GetTracerProvider().Tracer(
        InstrumentationName,
        trace.WithInstrumentationVersion(InstrumentationVersion),
        trace.WithSchemaURL("{{ schema_url }}"),
    )
)

// ClientHandler is a handler for the OTel Weaver client.
type ClientHandler struct {
    ctx      context.Context
	metricShutdown func(context.Context) error
	traceShutdown  func(context.Context) error
}

{%- set required_attrs = schema.resource.attributes | required | without_value -%}
{%- set not_required_attrs = schema.resource.attributes | not_required | without_value %}

{{ required::declare_attrs(attrs=required_attrs) }}
{{ optional::declare_attrs(marker="Resource", attrs=not_required_attrs) }}

// ==================
// ===== Client =====
// ==================

// Client returns a OTel client (generated by OTel Weaver).
// It uses a context initialized with `context.Background()`.
func Client(
    {{- required::declare_args(attrs=required_attrs) }}
    {% if not_required_attrs | length > 0 -%}optionalAttributes ...OptionalResourceAttribute,{% endif %}
) *ClientHandler {
    return ClientWithContext(
        context.Background(),
    {%- for attr in required_attrs %}
        {{attr.id | arg_name}},
    {%- endfor %}
    {% if not_required_attrs | length > 0 -%}optionalAttributes...,{% endif %}
    )
}

// ClientWithContext returns a OTel client with a given context (generated by OTel Weaver).
func ClientWithContext(
    ctx context.Context,
    {{- required::declare_args(attrs=required_attrs) }}
    {% if not_required_attrs | length > 0 -%}optionalAttributes ...OptionalResourceAttribute,{% endif %}
) *ClientHandler {
    metricShutdown, traceShutdown, err := installExportPipeline(
        {%- for attr in required_attrs %}
        {{attr.id | arg_name}},
        {%- endfor %}
        {% if not_required_attrs | length > 0 -%}optionalAttributes...,{% endif %}
    )
    if err != nil {
        log.Fatal(err)
    }

	return &ClientHandler{
		ctx:            ctx,
		metricShutdown: metricShutdown,
		traceShutdown:  traceShutdown,
	}
}

func (o *ClientHandler) Shutdown() {
	metricErr := o.metricShutdown(o.ctx)
	traceErr := o.traceShutdown(o.ctx)

	mustExit := false
	if metricErr != nil {
		log.Println(metricErr)
		mustExit = true
	}
	if traceErr != nil {
		log.Println(traceErr)
		mustExit = true
	}
	if mustExit {
		os.Exit(1)
	}
}

func resourceBuilder(
    {%- for attr in required_attrs %}
    {{attr.id | arg_name}} {{attr.id | struct_name}}ReqAttrWrapper,
    {%- endfor %}
    {% if not_required_attrs | length > 0 -%}optionalAttributes ...OptionalResourceAttribute,{% endif %}
) *resource.Resource {
    attrs := []otel_attr.KeyValue {
        {%- for attr in schema.resource.attributes | with_value %}
        attribute.{{ attr.id | field_name }}Key.{{ attr.type | type_mapping | function_name }}({{ attr.value | value }}),
        {%- endfor %}
        {%- for attr in required_attrs %}
        {{attr.id | arg_name}}.Attribute(),
        {%- endfor %}
    }
    {% if not_required_attrs | length > 0 -%}
    for _, attr := range optionalAttributes {
        attrs = append(attrs, attr.Attribute())
    }
    {% endif %}
    return resource.NewWithAttributes("{{ schema_url }}", attrs...)
}

func installExportPipeline(
    {%- for attr in required_attrs %}
    {{attr.id | arg_name}} {{attr.id | struct_name}}ReqAttrWrapper,
    {%- endfor %}
    {% if not_required_attrs | length > 0 -%}optionalAttributes ...OptionalResourceAttribute,{% endif %}
) (metricShutdown func(context.Context) error, traceShutdown func(context.Context) error, err error) {
    metricExporter, err := stdoutmetric.New(stdoutmetric.WithPrettyPrint())
	if err != nil {
		err = fmt.Errorf("creating metric stdout exporter: %w", err)
		return
	}

    traceExporter, err := stdouttrace.New(stdouttrace.WithPrettyPrint())
	if err != nil {
		err = fmt.Errorf("creating trace stdout exporter: %w", err)
		return
	}

    metricProvider := sdkmetric.NewMeterProvider(
		sdkmetric.WithReader(sdkmetric.NewPeriodicReader(metricExporter, sdkmetric.WithInterval(3*time.Second))),
        sdkmetric.WithResource(resourceBuilder(
            {%- for attr in required_attrs %}
            {{attr.id | arg_name}},
            {%- endfor %}
            {% if not_required_attrs | length > 0 -%}optionalAttributes...,{% endif %}
        )),
    )
    otel.SetMeterProvider(metricProvider)

    tracerProvider := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(traceExporter),
        sdktrace.WithResource(resourceBuilder(
            {%- for attr in required_attrs %}
            {{attr.id | arg_name}},
            {%- endfor %}
            {% if not_required_attrs | length > 0 -%}optionalAttributes...,{% endif %}
        )),
    )
    otel.SetTracerProvider(tracerProvider)

	metricShutdown = metricProvider.Shutdown
	traceShutdown = tracerProvider.Shutdown
	return
}