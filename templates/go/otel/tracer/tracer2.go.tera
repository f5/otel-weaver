// SPDX-License-Identifier: Apache-2.0

package tracer

import (
    "context"

    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/codes"
    "go.opentelemetry.io/otel/trace"

    client "go_test/pkg/otel"
)

{% if schema.resource_spans is defined -%}
// Declaration of all attribute keys.
var (
{%- for attr in schema.resource_spans.spans | unique_attributes %}
    {{ attr.id | field_name }}Key = attribute.Key("{{attr.id}}")
{%- endfor %}
)

{% for span in schema.resource_spans.spans %}

{%- set required_attrs = span.attributes | required -%}
{%- set not_required_attrs = span.attributes | not_required -%}
{%- if required_attrs | length > 0 %}
// Start{{ span.span_name | function_name }} starts a new `{{ span.span_name }}` span with
// the given required attributes.
func Start{{ span.span_name | function_name }}(
    {%- for attr in required_attrs %}
    {{attr.id | field_name}} {{attr.id | struct_name}}ReqAttr,
    {%- endfor %}
    ctx context.Context,
) *{{span.span_name | struct_name}}Span {
    ctx, span := client.Tracer.Start(ctx, "{{ span.span_name }}",
    {%- for attr in required_attrs %}
        trace.WithAttributes({{ attr.id | field_name }}Key.{{attr.type | type_mapping | function_name }}({{attr.id | field_name}}.{{attr.type | type_mapping }})),
    {%- endfor %}
    )
    return &{{span.span_name | struct_name}}Span {
        ctx: ctx,
        span: span,
        {{span.span_name | field_name}}Attrs: {{span.span_name | field_name}}Attrs {
            {%- for attr in required_attrs %}
            {{attr.id | field_name}}: {{attr.id | field_name}}.{{attr.type | type_mapping }},
            {%- endfor %}
        },
        {{span.span_name | field_name}}OptAttrs: &{{span.span_name | struct_name}}OptAttrs{},
    }
}

// Start{{ span.span_name | function_name }}WithOptAttrs starts a new `{{ span.span_name }}` span with
// the given required attributes and the optional attributes.
func Start{{ span.span_name | function_name }}WithOptAttrs(
    {%- for attr in required_attrs %}
    {{attr.id | field_name}} {{attr.id | struct_name}}ReqAttr,
    {% endfor %}
    optionalAttrs {{span.span_name | struct_name}}OptAttrs,
) *{{span.span_name | struct_name}}Span {
    return &{{span.span_name | struct_name}}Span {
        {{span.span_name | field_name}}Attrs: {{span.span_name | field_name}}Attrs {
        {%- for attr in required_attrs %}
            {{attr.id | field_name}}: {{attr.id | field_name}}.{{attr.type | type_mapping }},
        {% endfor %}
        },
        {{span.span_name | field_name}}OptAttrs: &optionalAttrs,
    }
}
{%- else %}
// Start{{ span.span_name | function_name }} starts a new named `{{ span.span_name }}` span.
func Start{{ span.span_name | function_name }}() *{{span.span_name | struct_name}}Span {
    return &{{span.span_name | struct_name}}Span {
    }
}

// Start{{ span.span_name | function_name }}WithOptAttrs starts a new named `{{ span.span_name }}` span with the given optional attributes.
func Start{{ span.span_name | function_name }}WithOptAttrs(
    optionalAttrs {{span.span_name | struct_name}}OptAttrs,
) -> *{{span.span_name | struct_name}}Span {
    return &{{span.span_name | struct_name}}Span {
        {{span.span_name | field_name}}OptAttrs: optionalAttrs,
    }
}
{%- endif %}

// {{span.span_name | struct_name}}Span is a span for `{{ span.span_name }}`.
type {{span.span_name | struct_name}}Span struct {
    ctx  context.Context
    span trace.Span

    {%- if required_attrs | length > 0 %}
    // Required span attributes for `{{ span.span_name }}`.
    {{span.span_name | field_name}}Attrs {{span.span_name | struct_name}}Attrs
    {%- endif -%}
    {%- if not_required_attrs | length > 0 %}
    // Optional span attributes for `{{ span.span_name }}`.
    {{span.span_name | field_name}}OptAttrs *{{span.span_name | struct_name}}OptAttrs
    {%- endif %}
    {%- if span.events | length > 0 %}
    // Events for `{{ span.span_name }}`.
    events []{{ span.span_name | struct_name }}Event
    {%- endif %}
}

{% if required_attrs | length > 0 -%}
{%- for attr in required_attrs %}
// {{attr.id | struct_name}}ReqAttr represents a required attribute for `{{ span.span_name }}`.
// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="// ") }}
type {{attr.id | struct_name}}ReqAttr struct { {{ attr.type | type_mapping }} }
func {{attr.id | struct_name}}(v {{ attr.type | type_mapping }}) {{attr.id | struct_name}}ReqAttr { return {{attr.id | struct_name}}ReqAttr{v} }
{%- endfor %}

// {{span.span_name | struct_name}}Attrs represents the required span attributes for `{{ span.span_name }}`.
type {{span.span_name | struct_name}}Attrs struct {
    {%- for attr in required_attrs %}
    // {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
    {{attr.id | field_name}} {{ attr.type | type_mapping }}
    {%- endfor %}
}
{%- endif %}

{% if not_required_attrs | length > 0 -%}
// {{span.span_name | struct_name}}OptAttrs represents the optional span attributes for `{{ span.span_name }}`.
type {{span.span_name | struct_name}}OptAttrs struct {
    {%- for attr in not_required_attrs %}
    // {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
    {{attr.id | field_name}} {{ attr.type | type_mapping }}
    {%- endfor %}
}
{%- endif %}

{% if span.events | length > 0 -%}
// {{ span.span_name | struct_name }}Event is interface implemented by all events for `{{ span.span_name }}`.
type {{ span.span_name | struct_name }}Event interface {
    // enum is a marker method for the interface.
    enum()
}

{% for event in span.events -%}
// {{ event.event_name | struct_name}}Event represents the event for `{{ event.event_name }}`.
type {{ event.event_name | struct_name}}Event struct {
{%- for attr in event.attributes %}
    // {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="    // ") }}
{%- if attr is required %}
    // This attribute is required.
    {{attr.id | field_name}} {{ attr.type | type_mapping }}
{% else %}
    // This attribute is optional.
    {{attr.id | field_name}} {{ attr.type | type_mapping }}
{% endif -%}
{% endfor %}
}

// enum is a marker method for the interface.
func (s {{ event.event_name | struct_name}}Event) enum() {}
{%- endfor %}
{%- endif %}

{% for attr in not_required_attrs %}
// Attr{{attr.id | function_name}} sets the optional attribute `{{ attr.id }}` for the span.
// {{ [attr.brief, attr.note, "", "# Examples", attr.examples] | comment(prefix="// ") }}
func (s *{{span.span_name | struct_name}}Span) Attr{{attr.id | function_name}}(value {{ attr.type | type_mapping }}) *{{span.span_name | struct_name}}Span {
    s.{{span.span_name | field_name}}OptAttrs.{{attr.id | field_name}} = value
    return s
}
{% endfor %}

{% if span.events | length > 0 -%}
// Event adds an event to the span.
func (s *{{span.span_name | struct_name}}Span) Event(event {{ span.span_name | struct_name }}Event) *{{span.span_name | struct_name}}Span {
    s.events = append(s.events, event)
    return s
}
{%- endif %}

// Status sets the status for the span.
func (s *{{span.span_name | struct_name}}Span) Status(status Status) *{{span.span_name | struct_name}}Span { return s }

// Error sets the error for the span.
func (s *{{span.span_name | struct_name}}Span) Error(err error) *{{span.span_name | struct_name}}Span { return s }

// End ends the span.
func (s *{{span.span_name | struct_name}}Span) End() {}

{%- if not_required_attrs | length > 0 %}

// EndWithOptAttrs ends the span with the optional attributes.
func (s *{{span.span_name | struct_name}}Span) EndWithOptAttrs(optionalAttrs {{span.span_name | struct_name}}OptAttrs) {
    s.{{span.span_name | field_name}}OptAttrs = &optionalAttrs
}
{%- endif %}
{% endfor  %}
{%  endif %}